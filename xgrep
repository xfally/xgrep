#!/bin/bash
###############################################################
# This script is created to find file or search content
# from current path (recursively) in your shell.
#
# Ver 0.2
# by pax (coolwinding@gmail.com) 160808
# Licence: MIT
###############################################################

###############################################################
# How to install and active?
# 1. Run `./install.sh` to create symbolic link in ~/bin/.
# 2. Add `. ~/bin/xgrep` in your ~/.bashrc,
#    then it will be actived every time one new shell open.
# Now you can run `xfind*` or `xgrep*` function at any path.
###############################################################

### START ###

# exit error code
# refer to /usr/include/sysexits.h
E_OK=0
E_NOT_FOUND=71

# when search content, use ack or grep at first?
# TIP: you can re-assign or unset the var in your shell to change search mode.
XGREP_USE_ACK=0 # use ack at first

# ignore some file or path, e.g. repo, git... you can add more path to ignore
grep_ignore_these_files="-iname .repo -prune -o -iname .git -prune -o -iname *.min.js -prune -o -iname *.min.css -prune -o -iname *.swp -prune"
# ack ignore backup files, coredumps and version control directories by default. run `ack --dump` for more.
ack_ignore_these_files=""

#P=`dirname $(readlink -f $0)`
#echo "[INFO] project path: ${P}"

#############
# find file #
#############

function _xfind_usage()
{
	echo -e "Usage: \033[31mxfind[i] {filename} {path}\033[0m Find any file (filename) from one path or current path (recursively)!" >&2
}

function _xfind()
{
	[ -z $2 ] && _xfind_usage && return;

	old_path=$(pwd)
	if [ ! -z $3 ]
	then
		echo "[INFO] cd to path $3"
		cd $3;
	fi

	if [[ "x$1" == "x1" ]]
	then
		local ignorecase="-i" # ignore case of filename
		local ignorecase2="-iname" # ignore case of filename
	else
		local ignorecase=""
		local ignorecase2="-name"
	fi

	shift
	local key=$1
	#echo "key: $key"

	# ack can not search tar file... always use find instead.
	#[[ $XGREP_USE_ACK == 1 ]] && ack $ack_ignore_these_files $ignorecase --color -g $key 2>/dev/null || {
		find . $grep_ignore_these_files -o $ignorecase2 "*$key*" -print | grep $ignorecase --color "$key"
	#}

	cd $old_path
}

#---------------------------------
# any files
#---------------------------------
function xfind()
{
	_xfind 0 "$@"
}

function xfindi()
{
	_xfind 1 "$@"
}

##################
# search content #
##################

function _xgrep_usage()
{
	echo -e "Usage: \033[31mxgrep[i][{type}] {content} [{path}]\033[0m Search any content from one path or current path (recursively)!
example1: xgrep Licence
example2: xgrepi \"How to\" /some/path
example3: xgrepsh \"function\"" >&2
}

function _xgrep()
{
	[ -z $3 ] && _xgrep_usage && return;

	old_path=$(pwd)
	if [ ! -z $4 ]
	then
		echo "[INFO] cd to path $4"
		cd $4;
	fi

	if [[ "x$1" == "x1" ]]
	then
		local ignorecase="-i" # ignore case of content
	else
		local ignorecase=""
	fi

	if [[ $2 == "any" ]]
	then
		local ack_regex=$ack_regex_any
		local grep_regex=$grep_regex_any
	else
		eval local ack_regex=\$ack_regex_${2}
		eval local grep_regex=\$grep_regex_${2}
	fi
	#echo ack_regex: $ack_regex
	#echo grep_regex: $grep_regex

	shift 2
	local key=$1
	#echo "key: $key"

	[[ $XGREP_USE_ACK == 1 ]] && ack $ack_ignore_these_files $ignorecase --color $ack_regex "$key" 2>/dev/null || {
		find . $grep_ignore_these_files -o -type f -iregex "$grep_regex" -print0 | xargs -0 grep $ignorecase --color -n "$key"
	}

	cd $old_path
}

#---------------------------------
# any files
#---------------------------------
ack_regex_any="--color" # trick
grep_regex_any=".+"

function xgrep()
{
	_xgrep 0 "any" "$@"
}

function xgrepi()
{
	_xgrep 1 "any" "$@"
}

#---------------------------------
# c, c++, m (objective-c), header
#---------------------------------
ack_regex_c="--type=cc --type=objc --type=objcpp"
grep_regex_c=".+\.\(c\|cc\|cpp\|cxx\|xs\|m\|hpp\|hh\|hxx\|h\)"

function xgrepc()
{
	_xgrep 0 "c" "$@"
}

function xgrepic()
{
	_xgrep 1 "c" "$@"
}

#---------------------------------
# just header
#---------------------------------
ack_regex_h="--type=hh"
grep_regex_h=".+\.\(h\)"

function xgreph()
{
	_xgrep 0 "h" "$@"
}

function xgrepih()
{
	_xgrep 1 "h" "$@"
}

#---------------------------------
# java
#---------------------------------
ack_regex_java="--type=java"
grep_regex_java=".+\.\(java\)"

function xgrepjava()
{
	_xgrep 0 "java" "$@"
}

function xgrepijava()
{
	_xgrep 1 "java" "$@"
}

#---------------------------------
# make, cmake
#---------------------------------
ack_regex_mk="--type=make --type-add make:ext:bb --type=cmake"
grep_regex_mk=".*\(Makefile\|\.mk\|\.mak\|\.bb\|CMakeLists\.txt\|\.cmake\)"

function xgrepmk()
{
	_xgrep 0 "mk" "$@"
}

function xgrepimk()
{
	_xgrep 1 "mk" "$@"
}

#---------------------------------
# html
#---------------------------------
ack_regex_html="--type=html"
grep_regex_html=".+\.\(html\|htm\)"

function xgrephtml()
{
	_xgrep 0 "html" "$@"
}

function xgrepihtml()
{
	_xgrep 1 "html" "$@"
}

#---------------------------------
# css
#---------------------------------
ack_regex_css="--type=css"
grep_regex_css=".+\.\(css\)"

function xgrepcss()
{
	_xgrep 0 "css" "$@"
}

function xgrepicss()
{
	_xgrep 1 "css" "$@"
}

#---------------------------------
# javascript, json
#---------------------------------
ack_regex_js="--type=js --type=json"
grep_regex_js=".+\.\(js\|json\)"

function xgrepjs()
{
	_xgrep 0 "js" "$@"
}

function xgrepijs()
{
	_xgrep 1 "js" "$@"
}

#---------------------------------
# xml
#---------------------------------
ack_regex_xml="--type=xml"
grep_regex_xml=".+\.\(xml\)"

function xgrepxml()
{
	_xgrep 0 "xml" "$@"
}

function xgrepixml()
{
	_xgrep 1 "xml" "$@"
}

#---------------------------------
# shell
#---------------------------------
ack_regex_sh="--type=shell"
grep_regex_sh=".+\.\(sh\|bash\|csh\|tcsh\|ksh\|zsh\|fish\)"

function xgrepsh()
{
	_xgrep 0 "sh" "$@"
}

function xgrepish()
{
	_xgrep 1 "sh" "$@"
}

#---------------------------------
# lua
#---------------------------------
ack_regex_lua="--type=lua"
grep_regex_lua=".+\.\(lua\)"

function xgreplua()
{
	_xgrep 0 "lua" "$@"
}

function xgrepilua()
{
	_xgrep 1 "lua" "$@"
}

#---------------------------------
# pdf
#---------------------------------
# depend on *pdftotext*
function _checkpdftotext()
{
	if [[ -x /usr/bin/pdftotext ]]
	then
		echo $E_OK
	else
		echo -e "\033[31m[ERROR] pdftotext (from poppler-utils) not installed!\033[0m" >&2
		echo $E_NOT_FOUND
	fi
}

function _xgreppdf()
{
	pdftotext=$(_checkpdftotext)
	if [[ "x"$pdftotext == "x"$E_OK ]]
	then
		if [[ -z $2 ]]
		then
			_xgrep_usage
			return
		else
			if [[ "x$1" == "x1" ]]
			then
				local ignorecase="-i"
			else
				local ignorecase=""
			fi

			old_path=$(pwd)
			if [ ! -z $3 ]
			then
				echo "[INFO] cd to path $3"
				cd $3;
			fi

			shift
			local key=$1
			#echo "key: $key"
		fi
		echo -e "\033[33m[INFO]: the line number is just suggested, not precise maybe.\033[0m"
		find . -iname '*.pdf' -print -exec pdftotext {} /tmp/tmp.txt \; -exec grep -n $ignorecase --color "$key" /tmp/tmp.txt \;
	fi
}

function xgreppdf()
{
	_xgreppdf 0 "$@"
}

function xgrepipdf()
{
	_xgreppdf 1 "$@"
}

#---------------------------------
# you can add more type if you like...
#---------------------------------

##############################
# search process and more... #
##############################

#---------------------------------
# env
#---------------------------------
function xgrepenv()
{
	env | grep --color "$@"
}

function xgrepienv()
{
	env | grep -i --color "$@"
}

#---------------------------------
# history
#---------------------------------
function xgrephistory()
{
	history | grep --color "$@"
}

function xgrepihistory()
{
	history | grep -i --color "$@"
}

#---------------------------------
# ps
#---------------------------------
function xgrepps()
{
	ps ax | grep --color "$@"
}

function xgrepips()
{
	ps ax | grep -i --color "$@"
}

#---------------------------------
# netstat
#---------------------------------
function xgrepnetstat()
{
	netstat -anpt | grep --color "$@"
}

function xgrepinetstat()
{
	netstat -anpt | grep -i --color "$@"
}

### END ###
